version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  node: circleci/node@5.1.0
  aws-cli: circleci/aws-cli@3.1.5
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        workflow_id:
          type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            # aws s3 rm s3://udapeople-<< parameters.workflow_id >>  --recursive
            # aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >> 
            # aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
      migrations-key:
        type: string
      when: 
        type: string
        default: "on_fail"
    steps:
      - run:
          name: "Install redis-cli"
          when: << parameters.when >>
          command: |
            # no error if existing, make parent directories as needed
            mkdir --parents ~/tmp
            cd ~/tmp
            # Download and install redis-cli
            wget http://download.redis.io/redis-stable.tar.gz
            tar xvzf redis-stable.tar.gz
            cd redis-stable
            make
            # Copy to bin and change mode
            sudo cp src/redis-cli /usr/local/bin/
            sudo chmod 755 /usr/local/bin/redis-cli
      - run:
          name: "Revert migrations if fail"
          when: << parameters.when >>
          environment:
            PARAM_MIGRATIONS_KEY: <<parameters.migrations-key>>
          command: |
            SUCCESS=$(
              redis-cli \
                -h redis-14871.c80.us-east-1-2.ec2.cloud.redislabs.com \
                -p 14871 \
                --user default \
                --pass ecBcgQIich3FefeFiqQvUdJUaK96WVck \
              GET $PARAM_MIGRATIONS_KEY
            )

            cd backend
            # Install dependencies
            npm install
            # Revert migration on fail
            npm run migrations:revert
            
jobs:
  build-frontend:
    docker:
      - image: node:18
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm update
            npm i typescript@latest
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1

  build-backend:
    # docker:
    #   - image: node:18
    executor:
      name: node/default
      tag: '14.17'
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    # docker:
    #   # Docker image here
    #   - image: node:18
    executor:
      name: node/default
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Run frontend test
          command: |
            cd frontend 
            npm install
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: node:18
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run build
            
  scan-frontend:
    # docker:
      # # Docker image here
      # - image: node:18
    executor:
      name: node/default
      tag: '14.17'
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    # docker:
    #   # Docker image here
    #   - image: node:18
    executor:
      name: node/default
      tag: '14.17'
    steps:
      - slack/notify:
          event: always
          channel: C05KG6G2EG0
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Failed in build #40*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            ## npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  upload_file:
    docker:
      - image: circleci/node:14.17.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup         
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
              aws ec2 describe-instances  \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # exit 1

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - aws-cli/setup
      # attach workspace
      - add_ssh_keys:
          fingerprints: ["ae:ec:89:55:3f:bc:3f:14:a9:bc:86:74:ed:c5:57:ea:1b:ea:83:d1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            pwd
            ls -la
            cat .circleci/ansible/inventory.txt 
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:14.17.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            cd backend
            # npm cache clean
            # rm -rf node_modules
            npm install
            sudo npm install -g typescript
            # npm audit fix --force
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: "Install redis-cli"
          command: |
            cd backend
            if cat migrations_dump.txt | grep "No migrations are pending"
            then
              echo "Skip Redis installation phase"
              exit 0
            fi
            # no error if existing, make parent directories as needed
            mkdir --parents ~/tmp
            cd ~/tmp
            wget http://download.redis.io/redis-stable.tar.gz
            tar xvzf redis-stable.tar.gz
            cd redis-stable
            make
            sudo cp src/redis-cli /usr/local/bin/
            sudo chmod 755 /usr/local/bin/redis-cli
      - run:
          name: Send migration results to redis-cloud
          command: |
            cd $(eval echo "$CIRCLE_WORKING_DIRECTORY/$PROJECT_ROOT_DIR/backend")

            if cat migrations_dump.txt | grep "has been executed successfully."
            then
              redis-cli \
                -h redis-14871.c80.us-east-1-2.ec2.cloud.redislabs.com \
                -p 14871 \
                --user default \
                --pass ecBcgQIich3FefeFiqQvUdJUaK96WVck \
              SET migration_${CIRCLE_WORKFLOW_ID:0:7} 1
            fi

            echo "No migration has been executed."
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          migrations-key: migration_${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: circleci/node:14.17.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - aws-cli/setup
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=*-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          migrations-key: migration_${CIRCLE_WORKFLOW_ID:0:7}              
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["9f:a6:cf:1a:ed:10:1b:9b:84:cb:20:c3:78:c5:66:27"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            mv artifact-backend.tar.gz .circleci/ansible
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
  #     # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          migrations-key: migration_${CIRCLE_WORKFLOW_ID:0:7} 

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
      # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - upload_file:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure, upload_file]
          filters:
            branches:
              only:
                - master
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]